# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from cgi import test
from PyQt5 import QtCore, QtGui, QtWidgets 
from PyQt5.QtWidgets import QWidget, QMessageBox
from PyQt5.QtCore import *
from Gui.python.Peltier import *
import time
import os
from Gui.siteSettings import *

class Peltier(QWidget):
    def __init__(self, dimension):
        super(Peltier, self).__init__()
        self.peltierInUse = False
        self.timer = QTimer()
        self.Ph2ACFDirectory = os.getenv("GUI_dir")
        self.setupUi()
        self.show()

    def setupUi(self):
        # MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(400, 300)

        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.currentSetTemp = QtWidgets.QLabel("Current Set Temperature: ", self)
        self.gridLayout.addWidget(self.currentSetTemp, 3,2,1,1)
        self.startButton = QtWidgets.QPushButton("Start Peltier Controller", self)
        if not usePeltier:
           self.startButton.setEnabled(False)
        self.startButton.clicked.connect(self.setup)
        self.gridLayout.addWidget(self.startButton, 0,0,1,1)
        self.currentTempDisplay = QtWidgets.QLCDNumber(self)
        self.gridLayout.addWidget(self.currentTempDisplay, 3, 0, 1, 2)
        self.setTempButton = QtWidgets.QPushButton("Set Temperature", self)
        self.setTempButton.setEnabled(False)
        self.gridLayout.addWidget(self.setTempButton, 1, 1, 1, 1)
        self.setTempInput = QtWidgets.QDoubleSpinBox(self)
        self.setTempInput.setRange(-50,50)
        self.gridLayout.addWidget(self.setTempInput, 1, 0, 1, 1)
        self.currentTempLabel = QtWidgets.QLabel(self)
        self.gridLayout.addWidget(self.currentTempLabel, 2, 0, 1, 1)

        self.polarityButton = QtWidgets.QPushButton("Change Polarity", self)
        self.polarityButton.setEnabled(False)
        self.gridLayout.addWidget(self.polarityButton, 2, 1, 1, 1)
        self.polarityButton.clicked.connect(self.polarityToggle)

        self.powerStatus = QtWidgets.QLabel(self)
        self.powerStatusLabel = QtWidgets.QLabel("Power Status of Peltier: ", self)
        self.powerButton = QtWidgets.QPushButton("Peltier Power On/Off")
        self.powerButton.setEnabled(False)
        self.powerButton.clicked.connect(self.powerToggle)
        self.gridLayout.addWidget(self.powerButton, 0, 2, 1, 1)

        self.image = QtGui.QPixmap()
        redledimage = QtGui.QImage(self.Ph2ACFDirectory + "/Gui/icons/led-red-on.png").scaled(QtCore.QSize(60,10), Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.redledpixmap = QtGui.QPixmap.fromImage(redledimage)
        greenledimage = QtGui.QImage(self.Ph2ACFDirectory + "/Gui/icons/green-led-on.png" ).scaled(QtCore.QSize(60,10), Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.greenledpixmap = QtGui.QPixmap.fromImage(greenledimage)
        self.powerStatus.setPixmap(self.redledpixmap) # The power status will initially always show that it's off, if it's actually on the status will be update in 0.5 seconds.

        self.gridLayout.addWidget(self.powerStatusLabel, 1, 2, 1, 1)
        self.gridLayout.addWidget(self.powerStatus, 1, 3, 1, 1)
        self.setTempButton.clicked.connect(self.setTemp)
        self.setLayout(self.gridLayout)

    def setup(self):
        try:
            self.pelt = PeltierController()

            # Setup controller to be controlled by computer and turn off Peltier if on
            self.setupWorker = startupWorker()
            self.setupWorker.signal.messageSignal.connect(lambda polarity: self.setPolarityStatus(polarity))
            self.setupWorker.run()                
            self.usePeltier = True
            self.enableButtons()
            #time.sleep(0.04) # Needed to avoid collision with temperature and power reading

            #Start temperature and power monitoring
            self.tempPower = tempPowerReading()
            self.timer.timeout.connect(self.tempPower.run)
            self.tempPower.signal.tempSignal.connect(lambda temp: self.currentTempDisplay.display(temp))
            self.tempPower.signal.powerSignal.connect(lambda power : self.setPowerStatus(power))
            self.timer.start(500)

            # Getting Polarity

        except Exception as e:
            print("Error while attempting to setup Peltier Controller: ", e)


    def enableButtons(self):
        if usePeltier == True:
            self.powerButton.setEnabled(True)
            self.polarityButton.setEnabled(True)
            self.setTempButton.setEnabled(True)


    def setPowerStatus(self, power):
        if power:
            self.powerStatus.setPixmap(self.greenledpixmap)
            self.powerStatusValue = 1
        else:
            self.powerStatus.setPixmap(self.redledpixmap)
            self.powerStatusValue = 0

    def powerToggle(self):
        if self.powerStatusValue == 0:
            try:
                print("Current Power Status", self.powerStatusValue)
                signalworker = signalWorker('Power On/Off Write', ['0','0','0','0','0','0','0','1'])
                signalworker.run()
            except Exception as e:
                print("Could not turn on controller due to error: ", e)
        elif self.powerStatusValue == 1:
            try:
                print("Current Power Status", self.powerStatusValue)
                signalworker = signalWorker('Power On/Off Write', ['0','0','0','0','0','0','0','0'])
                signalworker.run()
            except Exception as e:
                print("Could not turn off controller due to error: " , e)
        time.sleep(0.5) 

    def setPolarityStatus(self, polarity):
        print("Inside setPolarityStatus")
        try:
            if polarity[8] == '0':
                self.polarityValue = 'HEAT WP1+ and WP2-'
                self.polarityButton.setText(self.polarityValue)
            elif polarity[8] == '1':
                self.polarityValue = 'HEAT WP2+ and WP1-'
                self.polarityButton.setText(self.polarityValue)
            else:
                print("Unexpected value sent back from polarity change function")
        except Exception as e:
            print(f"Couldn't set polarity status: {e}")

    def polarityToggle(self):
        if self.polarityValue == 'HEAT WP1+ and WP2-':
            polarityCommand = '1'
            self.polarityValue = 'HEAT WP2+ and WP1-'
        elif self.polarityValue == 'HEAT WP2+ and WP1-':
            polarityCommand = '0'
            self.polarityValue = 'HEAT WP1+ and WP2-'
        else:
            print('Unexpected value read for polarity')
            return
        polaritySignal = signalWorker('Control Output Polarity Write', ['0','0','0','0','0','0','0', polarityCommand])
        polaritySignal.run()
        self.polarityButton.setText(self.polarityValue)



    def setTemp(self):
        try:
            message = self.pelt.setTemperature(self.setTempInput.value())
            signalworker = signalWorker('Fixed Desired Control Setting Write', message)
            signalworker.run()
            time.sleep(0.04)
#FIXME Should read in temperature from Controller not from input
            self.currentSetTempValue = self.pelt.readSetTemperature()
            self.currentSetTemp.setText(f"Current Set Temperature: {self.currentSetTempValue}")
        except Exception as e:
            print("Could not set Temperature: " , e)
            self.currentSetTemp.setText("N/a")
        # Send temperature reading to device

# Shutdown the peltier if it is on and stop threads that are running
    def shutdown(self):
        if self.setupWorker.finishedSetup:
            try:
                signalworker = signalWorker('Power On/Off Write', ['0','0','0','0','0','0','0','0'])
                signalworker.run()
            except Exception as e:
                print("Could not turn off controller due to error: " , e)

            try:
                self.tempPower.readTemp = False
            except AttributeError:
                pass
        else:
            pass



    def getPower(self):
        try:
            self.power = self.pelt.checkPower()
        except Exception as e:
            self.powerTimer.stop()
            print("Could not check power due to error: " , e)
    
    def showTemp(self):
        try:
            temp = self.pelt.readTemperature()
            self.currentTempDisplay.display(temp)
        except Exception as e:
            self.timer.stop()
            print("Could not read temperature due to error: ", e)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Peltier(500)
    sys.exit(app.exec_())
